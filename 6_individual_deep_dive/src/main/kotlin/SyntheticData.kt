package org.example
import java.util.Random


/**
 * Function that generates synthetic data using Random Gaussian Distribution around "true" centroids.
 *
 * @param trueCentroids list of true centroids
 * @param numPointsPerCluster number of points per cluster
 * @param stdDev standard deviation of the distribution of points around a true centroid
 *
 * @return the synthetically created data reshuffled
 */
fun generateSyntheticData(trueCentroids: List<List<Double>>, numPointsPerCluster: Int, stdDev: Double): Pair<List<List<Double>>, List<Int>> {
    val syntheticData = mutableListOf<List<Double>>()
    val trueLabels = mutableListOf<Int>()

    // loop through each true centroid to create clusters
    trueCentroids.forEachIndexed { clusterIndex, centroid ->

        val javaRandom = Random()
        // generate specified number of points per cluster
        repeat(numPointsPerCluster) {

            // create new points by adding random noise to the true centroid
            val newPoint = centroid.map { mean ->
                // random gaussian gives random number with mean = 0 and std = 1,
                // so scale the point generated by the standard deviation and shift it by the mean
                val noise = javaRandom.nextGaussian() * stdDev
                mean + noise
            }

            // add the new point to the synthetic data and its label
            syntheticData.add(newPoint)
            trueLabels.add(clusterIndex)
        }
    }


    // disorganizing the data to ensure fairness in K-means/K-means++ analysis
    val zipped = syntheticData.zip(trueLabels)
    val shuffled = zipped.shuffled()


    return shuffled.unzip()

}